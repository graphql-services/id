scalar Time

schema {
  query: Query
  mutation: Mutation
}

enum UserGender {
  male
  female
}

type User {
  id: ID!
  email: String!
  email_verified: Boolean!
  given_name: String
  family_name: String
  middle_name: String
  nickname: String
  preferred_username: String
  profile: String
  picture: String
  website: String
  gender: UserGender
  birthdate: Time
  zoneinfo: String
  locale: String
  phone_number: String
  phone_number_verified: String
  address: String
  updatedAt: Time
  createdAt: Time!
}

type Query {
  # fetch user information by id
  # TODO: this endpoint should be secured some way so it's not possible to fetch user info by email
  user(id: ID!): User
}

input UserInfo {
  given_name: String
  family_name: String
  middle_name: String
  nickname: String
  preferred_username: String
  profile: String
  picture: String
  website: String
  gender: UserGender
  birthdate: Time
  zoneinfo: String
  locale: String
  phone_number: String
  phone_number_verified: String
  address: String
}

type Mutation {
  # create user if not exists and send user's ID
  # creates requestID for confirming invitation that can be used in method confirmInvitation
  # TODO: this endpoint should be secured some way so it's not possible to fetch user info by email
  inviteUser(email: String!): User!
  # creates requestID for resetting password that can be used in method resetPassword
  forgotPassword(email: String!): Boolean!
  # creates requestID activating user that can be used in method activateUser
  registerUser(email: String!, password: String!, info: UserInfo): User!

  # requestID is sent to user using other channel (eg. email)
  confirmInvitation(requestID: ID!, password: String!, info: UserInfo): User!
  # requestID is sent to user using other channel (eg. email)
  activateUser(requestID: ID!, info: UserInfo): Boolean!
  # requestID is sent to user using other channel (eg. email)
  resetPassword(requestID: ID!, newPassword: String!): Boolean!

  # this method has to be called with user's access token
  updateUser(info: UserInfo!): User!
  # this method has to be called with user's access token
  updatePassword(oldPassword: String!, newPassword: String!): Boolean!
}

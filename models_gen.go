// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package id

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type ForgotPasswordRequest struct {
	ID       string     `json:"id"`
	ExpireAt *time.Time `json:"expireAt"`
}

type User struct {
	ID                  string      `json:"id"`
	Email               string      `json:"email"`
	GivenName           *string     `json:"given_name"`
	FamilyName          *string     `json:"family_name"`
	MiddleName          *string     `json:"middle_name"`
	Nickname            *string     `json:"nickname"`
	PreferredUsername   *string     `json:"preferred_username"`
	Profile             *string     `json:"profile"`
	Picture             *string     `json:"picture"`
	Website             *string     `json:"website"`
	Gender              *UserGender `json:"gender"`
	Birthdate           *time.Time  `json:"birthdate"`
	Zoneinfo            *string     `json:"zoneinfo"`
	Locale              *string     `json:"locale"`
	PhoneNumber         *string     `json:"phone_number"`
	PhoneNumberVerified *string     `json:"phone_number_verified"`
	Address             *string     `json:"address"`
}

type UserActivationRequest struct {
	ID       string     `json:"id"`
	UserID   string     `json:"userID"`
	ExpireAt *time.Time `json:"expireAt"`
}

type UserInfo struct {
	GivenName           *string     `json:"given_name"`
	FamilyName          *string     `json:"family_name"`
	MiddleName          *string     `json:"middle_name"`
	Nickname            *string     `json:"nickname"`
	PreferredUsername   *string     `json:"preferred_username"`
	Profile             *string     `json:"profile"`
	Picture             *string     `json:"picture"`
	Website             *string     `json:"website"`
	Gender              *UserGender `json:"gender"`
	Birthdate           *time.Time  `json:"birthdate"`
	Zoneinfo            *string     `json:"zoneinfo"`
	Locale              *string     `json:"locale"`
	PhoneNumber         *string     `json:"phone_number"`
	PhoneNumberVerified *string     `json:"phone_number_verified"`
	Address             *string     `json:"address"`
}

type UserGender string

const (
	UserGenderMale   UserGender = "male"
	UserGenderFemale UserGender = "female"
)

var AllUserGender = []UserGender{
	UserGenderMale,
	UserGenderFemale,
}

func (e UserGender) IsValid() bool {
	switch e {
	case UserGenderMale, UserGenderFemale:
		return true
	}
	return false
}

func (e UserGender) String() string {
	return string(e)
}

func (e *UserGender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserGender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserGender", str)
	}
	return nil
}

func (e UserGender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package id

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type _Entity interface {
	Is_Entity()
}

type User struct {
	ID                  string      `json:"id"`
	Email               string      `json:"email"`
	EmailVerified       bool        `json:"email_verified"`
	GivenName           *string     `json:"given_name"`
	FamilyName          *string     `json:"family_name"`
	MiddleName          *string     `json:"middle_name"`
	Nickname            *string     `json:"nickname"`
	PreferredUsername   *string     `json:"preferred_username"`
	Profile             *string     `json:"profile"`
	Picture             *string     `json:"picture"`
	Website             *string     `json:"website"`
	Gender              *UserGender `json:"gender"`
	Birthdate           *time.Time  `json:"birthdate"`
	Zoneinfo            *string     `json:"zoneinfo"`
	Locale              *string     `json:"locale"`
	PhoneNumber         *string     `json:"phone_number"`
	PhoneNumberVerified *string     `json:"phone_number_verified"`
	Address             *string     `json:"address"`
	UpdatedAt           *time.Time  `json:"updatedAt"`
	CreatedAt           time.Time   `json:"createdAt"`
}

func (User) Is_Entity() {}

type UserInfo struct {
	GivenName           *string     `json:"given_name"`
	FamilyName          *string     `json:"family_name"`
	MiddleName          *string     `json:"middle_name"`
	Nickname            *string     `json:"nickname"`
	PreferredUsername   *string     `json:"preferred_username"`
	Profile             *string     `json:"profile"`
	Picture             *string     `json:"picture"`
	Website             *string     `json:"website"`
	Gender              *UserGender `json:"gender"`
	Birthdate           *time.Time  `json:"birthdate"`
	Zoneinfo            *string     `json:"zoneinfo"`
	Locale              *string     `json:"locale"`
	PhoneNumber         *string     `json:"phone_number"`
	PhoneNumberVerified *string     `json:"phone_number_verified"`
	Address             *string     `json:"address"`
}

func (info UserInfo) UpdateUser(u *User) {
	u.GivenName = info.GivenName
	u.FamilyName = info.FamilyName
	u.MiddleName = info.MiddleName
	u.Nickname = info.Nickname
	u.PreferredUsername = info.FamilyName
	u.PreferredUsername = info.PreferredUsername
	u.Profile = info.Profile
	u.Picture = info.Picture
	u.Website = info.Website
	u.Gender = info.Gender
	u.Birthdate = info.Birthdate
	u.Zoneinfo = info.Zoneinfo
	u.Locale = info.Locale
	u.PhoneNumber = info.PhoneNumber
	u.PhoneNumberVerified = info.PhoneNumberVerified
	u.Address = info.Address
}

type _Service struct {
	Sdl *string `json:"sdl"`
}

type UserGender string

const (
	UserGenderMale   UserGender = "male"
	UserGenderFemale UserGender = "female"
)

var AllUserGender = []UserGender{
	UserGenderMale,
	UserGenderFemale,
}

func (e UserGender) IsValid() bool {
	switch e {
	case UserGenderMale, UserGenderFemale:
		return true
	}
	return false
}

func (e UserGender) String() string {
	return string(e)
}

func (e *UserGender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserGender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserGender", str)
	}
	return nil
}

func (e UserGender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
